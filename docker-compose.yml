version: '3.8'

services:
  db:
    image: mariadb
    container_name: mariadb-container
    restart: always
    networks:
      - app-network
    volumes:
      - db-data:/var/lib/mysql
      - ./script/01-init-user.sh:/docker-entrypoint-initdb.d/01-init-user.sh
      - ./script/02-init.sql:/docker-entrypoint-initdb.d/02-init.sql

    environment:
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MARIADB_DATABASE: ${DB_NAME}
      MARIADB_USER: ${DB_USER}
      MARIADB_PASSWORD: ${DB_PASSWORD}
    command: --bind-address=0.0.0.0
    ports:
      - "3306:3306"
    env_file:
      - .env

  back:
    image: ${BACK_IMAGE}
    container_name: backend-container
    restart: always
    networks:
      - app-network
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/usr/src/app/credentials.json
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - ORG_ZEROCK_UPLOAD_PATH=${ORG_ZEROCK_UPLOAD_PATH}
      - JWT_SECRET=${JWT_SECRET}
      - CLOUD_AWS_REGION_STATIC=${CLOUD_AWS_REGION_STATIC}
      - CLOUD_AWS_CREDENTIALS_ACCESSKEY=${CLOUD_AWS_CREDENTIALS_ACCESSKEY}
      - CLOUD_AWS_CREDENTIALS_SECRETKEY=${CLOUD_AWS_CREDENTIALS_SECRETKEY}
      - CLOUD_AWS_S3_BUCKET=${CLOUD_AWS_S3_BUCKET}
      - GOOGLE_CREDENTIALS_PATH=${GOOGLE_CREDENTIALS_PATH}
      - GA_PRODUCT_ID=${GA_PRODUCT_ID}
      - GA_PRODUCT_ID_ORI=${GA_PRODUCT_ID_ORI}
      - GA_PROJECT_ID=${GA_PROJECT_ID}
      - PAYMENT_TOSS_CONFIRM_URL=${PAYMENT_TOSS_CONFIRM_URL}
      - PAYMENT_TOSS_PAYMENT_URL=${PAYMENT_TOSS_PAYMENT_URL}
      - PAYMENT_TOSS_SECRET_KEY=${PAYMENT_TOSS_SECRET_KEY}
      - PAYMENT_TOSS_CLIENT_KEY=${PAYMENT_TOSS_CLIENT_KEY}
    volumes:
      - ./back/src/main/resources/credentials/credentials.json:/usr/src/app/credentials.json
    env_file:
      - ./back/.env.prod

  client:
    image: ${FRONT_IMAGE}
    container_name: client-container
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - back
    env_file:
      - ./client/.env.docker

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
