name: Deploy CI/CD

on:
  push:
    branches: [ "master" ]  # master에 push할 때 실행됨

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      FRONT_IMAGE: hamye4143/next-ecommerce-frontend
      BACK_IMAGE: hamye4143/next-ecommerce-backend
      IMAGE_TAG: ${{ github.sha }}

    steps:
      # 최신 코드 받기
      - name: Checkout code
        uses: actions/checkout@v3

      # Node.js 세팅
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Next.js: 빌드 시점에 .env.production 반드시 필요 (안넣으면 env 빈 값됨)
      - name: Set up .env.production
        working-directory: client
        run: echo "${{ secrets.DOT_ENV_PRODUCTION }}" > .env.production

      #      # 프론트엔드 테스팅
      #      - name: Run frontend test
      #        working-directory: client
      #        run: |
      #          npm ci
      #          npm run test

      # 프론트 빌드 + Docker 이미지 만들기
      - name: Build frontend
        working-directory: client
        run: |
          docker build -t $FRONT_IMAGE:$IMAGE_TAG -t $FRONT_IMAGE:latest -f Dockerfile .

      # Java 설치
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17

      # 백엔드 테스트 todo
      #      - name: Run backend test
      #        working-directory: back
      #        run: |
      #          ./gradlew test

      # 백엔드 빌드 + Docker 이미지 만들기
      - name: Build backend
        working-directory: back
        run: |
          ./gradlew clean bootJar -x test
          cp build/libs/app.jar app.jar
          docker build -t $BACK_IMAGE:$IMAGE_TAG -t $BACK_IMAGE:latest -f Dockerfile .

      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker images
        run: |
          docker push $FRONT_IMAGE:$IMAGE_TAG
          docker push $FRONT_IMAGE:latest
          docker push $BACK_IMAGE:$IMAGE_TAG
          docker push $BACK_IMAGE:latest

      #CI 서버에서 EC2로 docker-compose.yml 파일을 복사
      - name: Copy compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/next-ecommerce"

      # EC2에 접속해서 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: FRONT_IMAGE,BACK_IMAGE,IMAGE_TAG
          script: |
                    set -e
                    echo "기존 컨테이너 종료 (볼륨은 유지)"
                    docker-compose -f ~/next-ecommerce/docker-compose.yml down || true
            
                    echo "DB 볼륨 삭제"
                    docker volume rm -f next-ecommerce-db-data || true
  
                    echo "현재 볼륨 상태 확인"
                    docker volume ls | grep db-data || echo "db-data 볼륨이 존재하지 않습니다!"
                    
                    echo "이미지/네트워크 정리"
                    docker system prune -f || true
                    
                    echo "최신 이미지 풀링"
                    docker pull $FRONT_IMAGE:$IMAGE_TAG || true
                    docker pull $BACK_IMAGE:$IMAGE_TAG || true
                    
                    echo "새 컨테이너 실행"
                    FRONT_IMAGE=$FRONT_IMAGE:$IMAGE_TAG BACK_IMAGE=$BACK_IMAGE:$IMAGE_TAG docker-compose -f ~/next-ecommerce/docker-compose.yml up -d
