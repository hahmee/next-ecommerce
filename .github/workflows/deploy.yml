name: Deploy CI/CD

on:
  push:
    branches: [ "master" ]  # master에 push할 때 실행됨

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      FRONT_IMAGE: hamye4143/next-ecommerce-frontend
      BACK_IMAGE: hamye4143/next-ecommerce-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Next.js: 빌드 시점에 .env.production 반드시 필요 (안넣으면 env 빈 값됨)
      - name: Set up .env.production
        working-directory: client
        run: |
          echo "NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}" >> .env.production
          echo "NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}" >> .env.production
          echo "BACKEND_URL=${{ secrets.BACKEND_URL }}" >> .env.production
          echo "NEXT_PUBLIC_MODE=${{ secrets.NEXT_PUBLIC_MODE }}" >> .env.production
          echo "NEXT_PUBLIC_AWS_S3_BUCKET=${{ secrets.NEXT_PUBLIC_AWS_S3_BUCKET }}" >> .env.production
          echo "NEXT_PUBLIC_TOSS_CLIENT_KEY=${{ secrets.NEXT_PUBLIC_TOSS_CLIENT_KEY }}" >> .env.production
          echo "NEXT_PUBLIC_TOSS_SUCCESS=${{ secrets.NEXT_PUBLIC_TOSS_SUCCESS }}" >> .env.production
          echo "NEXT_PUBLIC_TOSS_FAIL=${{ secrets.NEXT_PUBLIC_TOSS_FAIL }}" >> .env.production
          echo "NEXT_PUBLIC_GOOGLE_GA_TRACKING_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_GA_TRACKING_ID }}" >> .env.production
          echo "NEXT_PUBLIC_GOOGLE_GTM_TRACKING_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_GTM_TRACKING_ID }}" >> .env.production

      - name: Check .env.production
        working-directory: client
        run: cat .env.production

#      # CI: 테스팅
#      - name: Run frontend test
#        working-directory: client
#        run: |
#          npm ci
#          npm run test
            

      # 프론트 빌드 + Docker 이미지 만들기
      - name: Build frontend
        working-directory: client
        run: |
          docker build -t $FRONT_IMAGE -f Dockerfile .

      # Java 설치
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17

      # 백엔드 application-prod.properties 생성
      - name: Create application-prod.properties
        working-directory: back/src/main/resources
        run: |
          echo "${{ secrets.APP_PROD_PROPERTIES }}" > application-prod.properties

      # 백엔드 테스트 todo
#      - name: Run backend test
#        working-directory: back
#        run: |
#          ./gradlew test

      # 백엔드 빌드 + Docker 이미지 만들기
      - name: Build backend
        working-directory: back
        run: |
          ./gradlew clean bootJar -x test
          cp build/libs/app.jar app.jar
          docker build -t $BACK_IMAGE -f Dockerfile .

      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker images
        run: |
          docker push $FRONT_IMAGE
          docker push $BACK_IMAGE

      # EC2에 접속해서 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: FRONT_IMAGE,BACK_IMAGE
          script: |
            # 최신 코드 받아오기 (docker-compose.yml 반영)
            cd ~/next-ecommerce
            git pull origin master  # master 브랜치 기준 최신 코드 반영

            echo "01-init-user.sh 실행 권한 부여"
            chmod +x ./script/01-init-user.sh

            echo "기존 컨테이너 종료 (볼륨은 유지)"
            docker-compose -f docker-compose.yml down

            echo "현재 볼륨 상태 확인"
            docker volume ls | grep db-data || echo "db-data 볼륨이 존재하지 않습니다!"

            echo "이미지/네트워크 정리"
            docker system prune -f

            echo "최신 이미지 풀링"
            docker pull $FRONT_IMAGE
            docker pull $BACK_IMAGE

            echo "새 컨테이너 실행"
            FRONT_IMAGE=$FRONT_IMAGE BACK_IMAGE=$BACK_IMAGE docker-compose -f ~/next-ecommerce/docker-compose.yml up -d
